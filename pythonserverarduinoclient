python code as a server- isme humne database ka connection kaisa banaya hai wo samjhne ki kosis karte hai. man lo mere pass ek system hai aur usme mera database ka file dala hua hai aur mere apss ek aur system hai aur ye code mai dusre system me chala rha hu aur mai chahta hu ki 
ye jo mera client system hai isme jo python code chal rha hai. wo server wale db se connect ho jaye to mujhe host me localhost ki jagah par server wale system ki ip dalni hogi. jaise man lo ki mera database jis system me chal rha hai uski ip hai 192.168.40.100 to mujhe database me host ji jagah par ye ip likhni hogi
aur ye dono system connected rhne chahiye lan cable se ek dusre se. switch aur router ke through
DbPath=host=127.0.0.1;user=root;password=;database=paytm_park;
Server_IP=192.168.1.151
Port=7000
Retry_milisec=30000
DebugLog=True
TimerMilliSec=5000

step-2 ye humara EntryBarrier.py wala code hai
import socket
import datetime
import time
import mysql.connector
import threading

CONFIG_FILE = "config.txt"
LOG_FILE = "Exit_Boom_services.txt"  # Define the log file name
INITIAL_MESSAGE = "|ENTRY%"

def read_config():
    config = {}
    with open(CONFIG_FILE, 'r') as file:
        for line in file:
            line = line.strip()
            if "=" in line:
                key, value = line.split("=", 1)
                config[key] = value
    return config

def parse_db_config(db_path):
    db_config = {}
    items = db_path.split(";")
    for item in items:
        if "=" in item:
            key, value = item.split("=")
            db_config[key] = value
    return db_config

def log_message(message):
    with open(LOG_FILE, 'a') as log:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log.write(f"{timestamp}: {message}\n")

def send_message(client_socket, message):
    try:
        client_socket.sendall(message.encode())
        log_message(f"Sent message: {message}")
    except Exception as e:
        log_message(f"Failed to send message: {e}")

def check_exit_boom(client_socket, db_config):
    last_status = None
    while True:
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()

            query = "SELECT exitboom FROM boomsig1"
            cursor.execute(query)

            result = cursor.fetchone()
            if result:
                exit_boom_status = result[0]
                if exit_boom_status == 'Y':
                    if last_status != 'Y':
                        log_message("Exit boom is open")
                        send_message(client_socket, INITIAL_MESSAGE)
                        time.sleep(3)  # Simulate wait time
                        
                        # Update the exitboom status back to 'N'
                        cursor.execute("UPDATE boomsig1 SET exitboom = 'N'")
                        conn.commit()
                        log_message("Exit boom status reset to 'N' after 3 seconds")
                last_status = exit_boom_status

            cursor.close()
            conn.close()
            time.sleep(3)  # Wait before next check
        except mysql.connector.Error as err:
            log_message(f"Database error: {err}")
            time.sleep(3)  # Wait before retrying on error
        except Exception as e:
            log_message(f"Unexpected error: {e}")
            break  # Exit the loop if an unexpected error occurs

def connect_to_db(db_config):
    """Tries to connect to the database, logs errors, and retries on failure."""
    db_conn = None
    while db_conn is None:
        try:
            db_conn = mysql.connector.connect(**db_config)
            log_message("Database connection established.")
        except mysql.connector.Error as err:
            log_message(f"Database connection error: {err}")
            log_message("Retrying in 3 seconds...")
            time.sleep(3)  # Wait before retrying
    return db_conn

def main():
    config = read_config()

    SERVER_IP = config['Server_IP']
    SERVER_PORT = int(config['Port'])
    DB_PATH = config['DbPath']

    db_config = parse_db_config(DB_PATH)

    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        client_socket.connect((SERVER_IP, SERVER_PORT))
        log_message(f"Connected to {SERVER_IP}:{SERVER_PORT}")

        # Start a thread to monitor exit boom status and interact with the database
        thread = threading.Thread(target=check_exit_boom, args=(client_socket, db_config))
        thread.daemon = True
        thread.start()

        while True:
            data = client_socket.recv(1024)
            if data:
                decoded_data = data.decode('utf-8')
                if "|HLT%" in decoded_data:
                    log_message(f"Received health packet: {decoded_data}")

    except ConnectionRefusedError:
        log_message(f"Connection to {SERVER_IP}:{SERVER_PORT} was refused.")
    except TimeoutError:
        log_message("Connection timed out. Check IP and port.")
    except Exception as e:
        log_message(f"An error occurred: {e}")
    finally:
        # Safely close the client socket
        if client_socket:
            client_socket.close()

if __name__ == "__main__":
    main()


arduino as a client
#include <SPI.h>
#include <Ethernet.h>

#define relayPin 8

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };  // MAC address for Ethernet shield
IPAddress serverIp(192, 168, 1, 157);  // Python server's IP address
int serverPort = 7000;  // Python server's port

EthernetClient client;
String clientData = "";

void setup() {
  Ethernet.begin(mac);
  Serial.begin(9600);

  while (!Serial) {
    ;  // Wait for serial port to connect (only needed for native USB port)
  }

  Serial.print("Arduino IP: ");
  Serial.println(Ethernet.localIP());

  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, HIGH);  // Ensure relay is off

  connectToServer();  // Try to connect to the Python server initially
}

void loop() {
  if (!client.connected()) {
    Serial.println("Reconnecting to server...");
    connectToServer();
  } else {
    if (client.available() > 0) {
      char thisChar = client.read();
      if (thisChar == '|') {
        clientData = "";  // Start of new message
      } else if (thisChar == '%') {
        processServerMessage();  // End of message, process it
      } else {
        clientData += thisChar;  // Accumulate the message
      }
    }
  }
}

void connectToServer() {
  if (client.connect(serverIp, serverPort)) {
    Serial.println("Connected to Python server");
  } else {
    Serial.println("Connection failed, retrying...");
    delay(5000);  // Wait before retrying
  }
}

void processServerMessage() {
  Serial.println("Received from server: " + clientData);
  if (clientData.equals("ENTRY")) {
    Serial.println("Barrier is opening");
    digitalWrite(relayPin, LOW);  // Trigger the relay (barrier open)
    delay(500);  // Keep the relay open for 500ms
    digitalWrite(relayPin, HIGH);  // Turn off the relay (barrier close)
  }
}
